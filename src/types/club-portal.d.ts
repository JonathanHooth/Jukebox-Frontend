/**
 * Club Portal Type Definitions
 *
 * Generated by club-portal-backend on 2025-08-29 14:29:00.333203.
 */

/**
 * Represents a Club object with all fields.
 */
declare interface IClub {
  /** Primary key */
  readonly id: number

  name: string

  about?: string | null

  founding_year: number

  contact_email?: string | null

  alias?: string | null

  primary_color?: string | null

  text_color?: string | null

  majors: string[]

  logo: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  }

  banner?: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  } | null

  tags: IClubTag[]

  socials: IClubSocial[]

  photos: IClubPhoto[]

  roles?: {
    /** Primary key */
    readonly id: number

    name: string

    /** New members would be automatically assigned this role. */
    is_default: boolean

    /** Used to determine the list ordering of a member */
    order: number

    role_type: 'admin' | 'editor' | 'viewer' | 'follower' | 'custom'
  }[]

  readonly created_at: Date

  readonly updated_at: Date

  readonly member_count: number

  readonly default_role: string
}

/**
 * Fields needed to create an IClubCreate object.
 *
 * @see {@link IClub}
 */
declare interface IClubCreate {
  name?: string | null

  about?: string | null

  founding_year?: number | null

  contact_email?: string | null

  alias?: string | null

  primary_color?: string | null

  text_color?: string | null

  majors?: string[] | null

  logo: {
    /** Primary key */
    id?: number | null
  }

  banner?: {
    /** Primary key */
    id?: number | null
  } | null

  tags?: IClubTag[] | null

  socials?: IClubSocial[] | null

  photos?: IClubPhoto[] | null

  roles?: {
    name?: string | null

    /** New members would be automatically assigned this role. */
    is_default?: boolean | null

    /** Used to determine the list ordering of a member */
    order?: number | null

    role_type?: 'admin' | 'editor' | 'viewer' | 'follower' | 'custom' | null
  }[]
}

/**
 * Fields that can be updated for an IClubUpdate object.
 *
 * @see {@link IClub}
 */
declare interface IClubUpdate {
  /** Primary key */
  readonly id?: number | null

  name?: string | null

  about?: string | null

  founding_year?: number | null

  contact_email?: string | null

  alias?: string | null

  primary_color?: string | null

  text_color?: string | null

  majors?: string[] | null

  logo?: {
    /** Primary key */
    id?: number | null
  } | null

  banner?: {
    /** Primary key */
    id?: number | null
  } | null

  tags?: IClubTag[] | null

  socials?: IClubSocial[] | null

  photos?: IClubPhoto[] | null

  roles?: {
    /** Primary key */
    id?: number | null

    name?: string | null

    /** New members would be automatically assigned this role. */
    is_default?: boolean | null

    /** Used to determine the list ordering of a member */
    order?: number | null

    role_type?: 'admin' | 'editor' | 'viewer' | 'follower' | 'custom' | null
  }[]
}

/**
 * Connects a User to a Club, stores membership information for that user.
 */
declare interface IClubMembership {
  /** Primary key */
  readonly id: number

  /** Determines whether user is the sole superadmin for the club. */
  is_owner: boolean

  points: number

  /** Club is pinned on user's dashboard. */
  is_pinned: boolean

  roles: string[]

  user: {
    /** Primary key */
    readonly id: number

    email: string

    image: string

    socials?: {
      /** Primary key */
      readonly id: number

      readonly social_type:
        | 'discord'
        | 'instagram'
        | 'facebook'
        | 'twitter'
        | 'linkedin'
        | 'github'
        | 'website'
        | 'bluesky'
        | 'slack'
        | 'other'

      readonly url?: string | null
    }[]

    readonly username: string

    readonly name: string
  }

  team_memberships?: {
    /** Primary key */
    readonly id: number

    team: number

    roles: string[]
  }[]

  readonly created_at: Date

  readonly updated_at: Date

  readonly club_id: number

  readonly is_admin: boolean

  readonly is_viewer: boolean

  readonly order: number
}

/**
 * Fields needed to create an IClubMembershipCreate object.
 *
 * @see {@link IClubMembership}
 */
declare interface IClubMembershipCreate {
  points?: number | null

  /** If the user has an existing account, they will redirect to this url. */
  club_redirect_url?: string | null

  send_email?: boolean | null

  roles?: string[] | null

  user: {
    email?: string | null

    /** Send account setup email if user is being created for the first time */
    send_account_email?: boolean | null

    /** A new user will click a link in their email that will redirect to this url. */
    account_setup_url?: string | null

    image?: string | null
  }

  team_memberships?: {
    team?: number | null

    roles?: string[] | null
  }[]
}

/**
 * Fields that can be updated for an IClubMembershipUpdate object.
 *
 * @see {@link IClubMembership}
 */
declare interface IClubMembershipUpdate {
  /** Primary key */
  readonly id?: number | null

  /** Determines whether user is the sole superadmin for the club. */
  is_owner?: boolean | null

  points?: number | null

  /** Club is pinned on user's dashboard. */
  is_pinned?: boolean | null

  roles?: string[] | null

  user?: {
    /** Primary key */
    id?: number | null

    email?: string | null

    /** Send account setup email if user is being created for the first time */
    send_account_email?: boolean | null

    /** A new user will click a link in their email that will redirect to this url. */
    account_setup_url?: string | null

    image?: string | null
  } | null

  team_memberships?: {
    /** Primary key */
    id?: number | null

    team?: number | null

    roles?: string[] | null
  }[]
}

/**
 * Represents a file that was uploaded to a club's media library.
 */
declare interface IClubFile {
  /** Primary key */
  readonly id: number

  /** Full url to file, upload multipart form file data to create/update */
  file: string

  display_name: string

  readonly club: number

  readonly size: unknown

  readonly uploaded_by?: number | null

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IClubFileCreate object.
 *
 * @see {@link IClubFile}
 */
declare interface IClubFileCreate {
  /** Full url to file, upload multipart form file data to create/update */
  file?: string | null

  display_name?: string | null
}

/**
 * Fields that can be updated for an IClubFileUpdate object.
 *
 * @see {@link IClubFile}
 */
declare interface IClubFileUpdate {
  /** Primary key */
  readonly id?: number | null

  /** Full url to file, upload multipart form file data to create/update */
  file?: string | null

  display_name?: string | null
}

/**
 * Represents photos for clubs.
 */
declare interface IClubPhoto {
  /** Primary key */
  readonly id: number

  order: number

  file: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  }
}

/**
 * Fields needed to create an IClubPhotoCreate object.
 *
 * @see {@link IClubPhoto}
 */
declare interface IClubPhotoCreate {
  order?: number | null

  file: {
    /** Primary key */
    id?: number | null
  }
}

/**
 * Fields that can be updated for an IClubPhotoUpdate object.
 *
 * @see {@link IClubPhoto}
 */
declare interface IClubPhotoUpdate {
  /** Primary key */
  readonly id?: number | null

  order?: number | null

  file?: {
    /** Primary key */
    id?: number | null
  } | null
}

/**
 * Represents a sub group of users within a club.
 */
declare interface ITeam {
  /** Primary key */
  readonly id: number

  name: string

  points: number

  access: 'open' | 'team' | 'org' | 'closed'

  /** Show this team on the club's roster. */
  show_on_roster: boolean

  memberships: ITeamMembership[]

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an ITeamCreate object.
 *
 * @see {@link ITeam}
 */
declare interface ITeamCreate {
  name?: string | null

  points?: number | null

  access?: 'open' | 'team' | 'org' | 'closed' | null

  /** Show this team on the club's roster. */
  show_on_roster?: boolean | null

  memberships?: ITeamMembershipCreate[] | null
}

/**
 * Fields that can be updated for an ITeamUpdate object.
 *
 * @see {@link ITeam}
 */
declare interface ITeamUpdate {
  /** Primary key */
  readonly id?: number | null

  name?: string | null

  points?: number | null

  access?: 'open' | 'team' | 'org' | 'closed' | null

  /** Show this team on the club's roster. */
  show_on_roster?: boolean | null

  memberships?: ITeamMembershipUpdate[] | null
}

/**
 * List members of a specific team.
 */
declare interface ITeamMembership {
  /** Primary key */
  readonly id: number

  order: number

  roles: string[]

  user: {
    /** Primary key */
    readonly id: number

    image: string

    socials?: {
      /** Primary key */
      readonly id: number

      readonly social_type:
        | 'discord'
        | 'instagram'
        | 'facebook'
        | 'twitter'
        | 'linkedin'
        | 'github'
        | 'website'
        | 'bluesky'
        | 'slack'
        | 'other'

      readonly url?: string | null
    }[]

    readonly username: string

    readonly email?: string | null

    readonly name: string
  }

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an ITeamMembershipCreate object.
 *
 * @see {@link ITeamMembership}
 */
declare interface ITeamMembershipCreate {
  order?: number | null

  roles?: string[] | null

  user: {
    /** Primary key */
    id?: number | null

    image?: string | null
  }
}

/**
 * Fields that can be updated for an ITeamMembershipUpdate object.
 *
 * @see {@link ITeamMembership}
 */
declare interface ITeamMembershipUpdate {
  /** Primary key */
  readonly id?: number | null

  order?: number | null

  roles?: string[] | null

  user?: {
    /** Primary key */
    id?: number | null

    image?: string | null
  } | null
}

/**
 * Represents a calendar event for a single or multiple clubs.
 */
declare interface IEvent {
  /** Primary key */
  readonly id: number

  name: string

  event_type:
    | 'gbm'
    | 'workshop'
    | 'social'
    | 'internal_meeting'
    | 'speaker'
    | 'other'

  description?: string | null

  location?: string | null

  /** Create poll for event and users to attend. */
  enable_attendance: boolean

  start_at: Date

  end_at: Date

  is_draft: boolean

  is_public: boolean

  make_public_at?: Date | null

  recurring_event?: number | null

  poll?: IPoll | null

  hosts: IEventHost[]

  tags: IEventTag[]

  attachments?: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  }[]

  attendance_links?: {
    /** Primary key */
    readonly id: number

    /** Used to differentiate between links */
    reference?: string | null

    /** Should clicking this url create a `LinkVisit` object? */
    is_tracked: boolean

    display_name?: string | null

    readonly url: string

    /** URL for the QRCode SVG */
    readonly qrcode_url: string
  }[]

  readonly status: string

  readonly duration: string

  readonly is_all_day: boolean

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IEventCreate object.
 *
 * @see {@link IEvent}
 */
declare interface IEventCreate {
  name?: string | null

  event_type?:
    | 'gbm'
    | 'workshop'
    | 'social'
    | 'internal_meeting'
    | 'speaker'
    | 'other'
    | null

  description?: string | null

  location?: string | null

  /** Create poll for event and users to attend. */
  enable_attendance?: boolean | null

  start_at?: Date | null

  end_at?: Date | null

  is_draft?: boolean | null

  is_public?: boolean | null

  make_public_at?: Date | null

  recurring_event?: number | null

  poll?: IPollCreate | null

  hosts?: IEventHostCreate[] | null

  tags?: IEventTag[] | null

  attachments?: {
    /** Primary key */
    id?: number | null
  }[]

  attendance_links?: {
    /** Used to differentiate between links */
    reference?: string | null

    /** Should clicking this url create a `LinkVisit` object? */
    is_tracked?: boolean | null

    display_name?: string | null
  }[]
}

/**
 * Fields that can be updated for an IEventUpdate object.
 *
 * @see {@link IEvent}
 */
declare interface IEventUpdate {
  /** Primary key */
  readonly id?: number | null

  name?: string | null

  event_type?:
    | 'gbm'
    | 'workshop'
    | 'social'
    | 'internal_meeting'
    | 'speaker'
    | 'other'
    | null

  description?: string | null

  location?: string | null

  /** Create poll for event and users to attend. */
  enable_attendance?: boolean | null

  start_at?: Date | null

  end_at?: Date | null

  is_draft?: boolean | null

  is_public?: boolean | null

  make_public_at?: Date | null

  recurring_event?: number | null

  poll?: IPollUpdate | null

  hosts?: IEventHostUpdate[] | null

  tags?: IEventTag[] | null

  attachments?: {
    /** Primary key */
    id?: number | null
  }[]

  attendance_links?: {
    /** Primary key */
    id?: number | null

    /** Used to differentiate between links */
    reference?: string | null

    /** Should clicking this url create a `LinkVisit` object? */
    is_tracked?: boolean | null

    display_name?: string | null
  }[]
}

/**
 * JSON representation for hosts inside events.
 */
declare interface IEventHost {
  /** Primary key */
  readonly id: number

  club_id: number

  /** This is the main club that hosts the event. */
  is_primary: boolean

  readonly club_name: string

  readonly club_logo?: string | null
}

/**
 * Fields needed to create an IEventHostCreate object.
 *
 * @see {@link IEventHost}
 */
declare interface IEventHostCreate {
  club_id?: number | null

  /** This is the main club that hosts the event. */
  is_primary?: boolean | null
}

/**
 * Fields that can be updated for an IEventHostUpdate object.
 *
 * @see {@link IEventHost}
 */
declare interface IEventHostUpdate {
  /** Primary key */
  readonly id?: number | null

  club_id?: number | null

  /** This is the main club that hosts the event. */
  is_primary?: boolean | null
}

/**
 * Defines repeating events.
 */
declare interface IRecurringEvent {
  /** Primary key */
  readonly id: number

  name: string

  /** Date of the first occurance of this event */
  start_date: Date

  /** Date of the last occurance of this event */
  end_date: Date

  event_type:
    | 'gbm'
    | 'workshop'
    | 'social'
    | 'internal_meeting'
    | 'speaker'
    | 'other'

  description?: string | null

  location?: string | null

  /** Create poll for event and users to attend. */
  enable_attendance: boolean

  /** Each event will start at this time, in UTC */
  event_start_time: string

  /** Each event will end at this time, in UTC */
  event_end_time: string

  is_public: boolean

  /** When syncing events, should past events be prevented from updating? */
  prevent_sync_past_events: boolean

  /** Club that owns recurring template, hosts all the events from it. */
  club?: number | null

  /** These clubs host the events as secondary hosts. */
  other_clubs: number[]

  days: import('./club-portal-enums.ts').DaysType[]

  attachments?: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  }[]

  readonly is_all_day: boolean

  readonly created_at: Date

  readonly updated_at: Date

  /** Last time events were synced */
  readonly last_synced?: Date | null
}

/**
 * Fields needed to create an IRecurringEventCreate object.
 *
 * @see {@link IRecurringEvent}
 */
declare interface IRecurringEventCreate {
  name?: string | null

  /** Date of the first occurance of this event */
  start_date?: Date | null

  /** Date of the last occurance of this event */
  end_date?: Date | null

  event_type?:
    | 'gbm'
    | 'workshop'
    | 'social'
    | 'internal_meeting'
    | 'speaker'
    | 'other'
    | null

  description?: string | null

  location?: string | null

  /** Create poll for event and users to attend. */
  enable_attendance?: boolean | null

  /** Each event will start at this time, in UTC */
  event_start_time?: string | null

  /** Each event will end at this time, in UTC */
  event_end_time?: string | null

  is_public?: boolean | null

  /** When syncing events, should past events be prevented from updating? */
  prevent_sync_past_events?: boolean | null

  /** Club that owns recurring template, hosts all the events from it. */
  club?: number | null

  /** These clubs host the events as secondary hosts. */
  other_clubs?: number[] | null

  days?: import('./club-portal-enums.ts').DaysType[] | null

  attachments?: {
    /** Primary key */
    id?: number | null
  }[]
}

/**
 * Fields that can be updated for an IRecurringEventUpdate object.
 *
 * @see {@link IRecurringEvent}
 */
declare interface IRecurringEventUpdate {
  /** Primary key */
  readonly id?: number | null

  name?: string | null

  /** Date of the first occurance of this event */
  start_date?: Date | null

  /** Date of the last occurance of this event */
  end_date?: Date | null

  event_type?:
    | 'gbm'
    | 'workshop'
    | 'social'
    | 'internal_meeting'
    | 'speaker'
    | 'other'
    | null

  description?: string | null

  location?: string | null

  /** Create poll for event and users to attend. */
  enable_attendance?: boolean | null

  /** Each event will start at this time, in UTC */
  event_start_time?: string | null

  /** Each event will end at this time, in UTC */
  event_end_time?: string | null

  is_public?: boolean | null

  /** When syncing events, should past events be prevented from updating? */
  prevent_sync_past_events?: boolean | null

  /** Club that owns recurring template, hosts all the events from it. */
  club?: number | null

  /** These clubs host the events as secondary hosts. */
  other_clubs?: number[] | null

  days?: import('./club-portal-enums.ts').DaysType[] | null

  attachments?: {
    /** Primary key */
    id?: number | null
  }[]
}

/**
 * JSON definition for polls.
 */
declare interface IPoll {
  /** Primary key */
  readonly id: number

  name: string

  is_published: boolean

  description?: string | null

  open_at?: Date | null

  close_at?: Date | null

  event?: {
    /** Primary key */
    readonly id: number

    attendance_links: {
      /** Primary key */
      readonly id: number

      club: number

      readonly url: string

      /** URL for the QRCode SVG */
      readonly qrcode_url: string
    }[]

    readonly name: string

    readonly start_at: Date

    readonly end_at: Date
  } | null

  club?: {
    /** Primary key */
    readonly id: number

    readonly name: string
  } | null

  link?: {
    /** Primary key */
    readonly id: number

    club: number

    readonly url: string

    /** URL for the QRCode SVG */
    readonly qrcode_url: string
  } | null

  fields: IPollField[]

  readonly created_at: Date

  readonly updated_at: Date

  readonly submissions_count: number

  readonly last_submission_at?: Date | null

  readonly status: 'open' | 'closed' | 'scheduled' | 'draft'

  readonly poll_type: 'standard' | 'template'

  readonly submissions_download_url: string
}

/**
 * Fields needed to create an IPollCreate object.
 *
 * @see {@link IPoll}
 */
declare interface IPollCreate {
  name?: string | null

  is_published?: boolean | null

  description?: string | null

  open_at?: Date | null

  close_at?: Date | null

  event?: {
    /** Primary key */
    id?: number | null

    attendance_links: {
      club?: number | null
    }[]
  } | null

  club: {
    /** Primary key */
    id?: number | null
  }
}

/**
 * Fields that can be updated for an IPollUpdate object.
 *
 * @see {@link IPoll}
 */
declare interface IPollUpdate {
  /** Primary key */
  readonly id?: number | null

  name?: string | null

  is_published?: boolean | null

  description?: string | null

  open_at?: Date | null

  close_at?: Date | null

  event?: {
    /** Primary key */
    id?: number | null

    attendance_links?: {
      /** Primary key */
      id?: number | null

      club?: number | null
    }[]
  } | null

  club?: {
    /** Primary key */
    id?: number | null
  } | null
}

/**
 * Show poll fields  in polls.
 */
declare interface IPollField {
  /** Primary key */
  readonly id: number

  field_type: 'question' | 'page_break' | 'markup'

  order: number

  question?: IPollQuestion | null

  markup?: {
    /** Primary key */
    readonly id: number

    content: string

    field: number

    label?: string | null
  } | null
}

/**
 * Fields needed to create an IPollFieldCreate object.
 *
 * @see {@link IPollField}
 */
declare interface IPollFieldCreate {
  field_type?: 'question' | 'page_break' | 'markup' | null

  order?: number | null

  question?: IPollQuestionCreate | null

  markup?: {
    content?: string | null

    field?: number | null

    label?: string | null
  } | null
}

/**
 * Fields that can be updated for an IPollFieldUpdate object.
 *
 * @see {@link IPollField}
 */
declare interface IPollFieldUpdate {
  /** Primary key */
  readonly id?: number | null

  field_type?: 'question' | 'page_break' | 'markup' | null

  order?: number | null

  question?: IPollQuestionUpdate | null

  markup?: {
    /** Primary key */
    id?: number | null

    content?: string | null

    field?: number | null

    label?: string | null
  } | null
}

/**
 * Show questions nested in poll fields.
 */
declare interface IPollQuestion {
  /** Primary key */
  readonly id: number

  label: string

  input_type:
    | 'text'
    | 'choice'
    | 'scale'
    | 'upload'
    | 'number'
    | 'email'
    | 'phone'
    | 'date'
    | 'time'
    | 'url'
    | 'checkbox'

  description?: string | null

  image?: string | null

  is_required: boolean

  link_user_field?:
    | 'name'
    | 'phone'
    | 'major'
    | 'minor'
    | 'college'
    | 'graduation_date'
    | null

  field: number

  text_input?: ITextInput | null

  choice_input?: IChoiceInput | null

  scale_input?: IScaleInput | null

  upload_input?: IUploadInput | null

  number_input?: INumberInput | null

  email_input?: IEmailInput | null

  phone_input?: IPhoneInput | null

  date_input?: IDateInput | null

  time_input?: ITimeInput | null

  url_input?: IUrlInput | null

  checkbox_input?: ICheckboxInput | null

  readonly answer_field:
    | 'text_value'
    | 'number_value'
    | 'options_value'
    | 'boolean_value'
    | 'file_value'

  readonly is_user_lookup: boolean
}

/**
 * Fields needed to create an IPollQuestionCreate object.
 *
 * @see {@link IPollQuestion}
 */
declare interface IPollQuestionCreate {
  label?: string | null

  input_type?:
    | 'text'
    | 'choice'
    | 'scale'
    | 'upload'
    | 'number'
    | 'email'
    | 'phone'
    | 'date'
    | 'time'
    | 'url'
    | 'checkbox'
    | null

  description?: string | null

  image?: string | null

  is_required?: boolean | null

  link_user_field?:
    | 'name'
    | 'phone'
    | 'major'
    | 'minor'
    | 'college'
    | 'graduation_date'
    | null

  field?: number | null

  text_input?: ITextInputCreate | null

  choice_input?: IChoiceInputCreate | null

  scale_input?: IScaleInputCreate | null

  upload_input?: IUploadInputCreate | null

  number_input?: INumberInputCreate | null

  email_input?: IEmailInputCreate | null

  phone_input?: IPhoneInputCreate | null

  date_input?: IDateInputCreate | null

  time_input?: ITimeInputCreate | null

  url_input?: IUrlInputCreate | null

  checkbox_input?: ICheckboxInputCreate | null
}

/**
 * Fields that can be updated for an IPollQuestionUpdate object.
 *
 * @see {@link IPollQuestion}
 */
declare interface IPollQuestionUpdate {
  /** Primary key */
  readonly id?: number | null

  label?: string | null

  input_type?:
    | 'text'
    | 'choice'
    | 'scale'
    | 'upload'
    | 'number'
    | 'email'
    | 'phone'
    | 'date'
    | 'time'
    | 'url'
    | 'checkbox'
    | null

  description?: string | null

  image?: string | null

  is_required?: boolean | null

  link_user_field?:
    | 'name'
    | 'phone'
    | 'major'
    | 'minor'
    | 'college'
    | 'graduation_date'
    | null

  field?: number | null

  text_input?: ITextInputUpdate | null

  choice_input?: IChoiceInputUpdate | null

  scale_input?: IScaleInputUpdate | null

  upload_input?: IUploadInputUpdate | null

  number_input?: INumberInputUpdate | null

  email_input?: IEmailInputUpdate | null

  phone_input?: IPhoneInputUpdate | null

  date_input?: IDateInputUpdate | null

  time_input?: ITimeInputUpdate | null

  url_input?: IUrlInputUpdate | null

  checkbox_input?: ICheckboxInputUpdate | null
}

/**
 * Text input, textarea, or rich text editor.
 */
declare interface ITextInput {
  /** Primary key */
  readonly id: number

  min_length?: number | null

  max_length?: number | null

  text_type: import('./club-portal-enums.ts').TextType

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an ITextInputCreate object.
 *
 * @see {@link ITextInput}
 */
declare interface ITextInputCreate {
  min_length?: number | null

  max_length?: number | null

  text_type?: import('./club-portal-enums.ts').TextType | null
}

/**
 * Fields that can be updated for an ITextInputUpdate object.
 *
 * @see {@link ITextInput}
 */
declare interface ITextInputUpdate {
  /** Primary key */
  readonly id?: number | null

  min_length?: number | null

  max_length?: number | null

  text_type?: import('./club-portal-enums.ts').TextType | null
}

/**
 * Options given to user for a choice input.
 */
declare interface IChoiceInput {
  /** Primary key */
  readonly id: number

  is_multiple: boolean

  choice_type: import('./club-portal-enums.ts').ChoiceType

  options: IChoiceInputOption[]

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IChoiceInputCreate object.
 *
 * @see {@link IChoiceInput}
 */
declare interface IChoiceInputCreate {
  is_multiple?: boolean | null

  choice_type?: import('./club-portal-enums.ts').ChoiceType | null

  options?: IChoiceInputOptionCreate[] | null
}

/**
 * Fields that can be updated for an IChoiceInputUpdate object.
 *
 * @see {@link IChoiceInput}
 */
declare interface IChoiceInputUpdate {
  /** Primary key */
  readonly id?: number | null

  is_multiple?: boolean | null

  choice_type?: import('./club-portal-enums.ts').ChoiceType | null

  options?: IChoiceInputOptionUpdate[] | null
}

/**
 * Allow user to select one or multiple options.
 */
declare interface IChoiceInputOption {
  /** Primary key */
  readonly id: number

  label: string

  value: string

  order: number

  image?: string | null

  is_default: boolean

  is_other: boolean

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IChoiceInputOptionCreate object.
 *
 * @see {@link IChoiceInputOption}
 */
declare interface IChoiceInputOptionCreate {
  label?: string | null

  value?: string | null

  order?: number | null

  image?: string | null

  is_default?: boolean | null

  is_other?: boolean | null
}

/**
 * Fields that can be updated for an IChoiceInputOptionUpdate object.
 *
 * @see {@link IChoiceInputOption}
 */
declare interface IChoiceInputOptionUpdate {
  /** Primary key */
  readonly id?: number | null

  label?: string | null

  value?: string | null

  order?: number | null

  image?: string | null

  is_default?: boolean | null

  is_other?: boolean | null
}

/**
 * Allow user to select number in a linear scale format.
 */
declare interface IScaleInput {
  /** Primary key */
  readonly id: number

  max_value: number

  left_label?: string | null

  right_label?: string | null

  initial_value: number

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IScaleInputCreate object.
 *
 * @see {@link IScaleInput}
 */
declare interface IScaleInputCreate {
  max_value?: number | null

  left_label?: string | null

  right_label?: string | null

  initial_value?: number | null
}

/**
 * Fields that can be updated for an IScaleInputUpdate object.
 *
 * @see {@link IScaleInput}
 */
declare interface IScaleInputUpdate {
  /** Primary key */
  readonly id?: number | null

  max_value?: number | null

  left_label?: string | null

  right_label?: string | null

  initial_value?: number | null
}

/**
 * Allow user to upload file as a ClubFile.
 */
declare interface IUploadInput {
  /** Primary key */
  readonly id: number

  max_files: number

  max_file_size: number

  file_types?: import('./club-portal-enums.ts').FilesType[] | null

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IUploadInputCreate object.
 *
 * @see {@link IUploadInput}
 */
declare interface IUploadInputCreate {
  max_files?: number | null

  max_file_size?: number | null

  file_types?: import('./club-portal-enums.ts').FilesType[] | null
}

/**
 * Fields that can be updated for an IUploadInputUpdate object.
 *
 * @see {@link IUploadInput}
 */
declare interface IUploadInputUpdate {
  /** Primary key */
  readonly id?: number | null

  max_files?: number | null

  max_file_size?: number | null

  file_types?: import('./club-portal-enums.ts').FilesType[] | null
}

/**
 * Allow user to enter a plain number.
 */
declare interface INumberInput {
  /** Primary key */
  readonly id: number

  min_value: number

  max_value: number

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an INumberInputCreate object.
 *
 * @see {@link INumberInput}
 */
declare interface INumberInputCreate {
  min_value?: number | null

  max_value?: number | null
}

/**
 * Fields that can be updated for an INumberInputUpdate object.
 *
 * @see {@link INumberInput}
 */
declare interface INumberInputUpdate {
  /** Primary key */
  readonly id?: number | null

  min_value?: number | null

  max_value?: number | null
}

/**
 * Text input with extra email validation.
 */
declare interface IEmailInput {
  /** Primary key */
  readonly id: number

  min_length?: number | null

  max_length?: number | null

  is_school_email: boolean

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IEmailInputCreate object.
 *
 * @see {@link IEmailInput}
 */
declare interface IEmailInputCreate {
  min_length?: number | null

  max_length?: number | null

  is_school_email?: boolean | null
}

/**
 * Fields that can be updated for an IEmailInputUpdate object.
 *
 * @see {@link IEmailInput}
 */
declare interface IEmailInputUpdate {
  /** Primary key */
  readonly id?: number | null

  min_length?: number | null

  max_length?: number | null

  is_school_email?: boolean | null
}

/**
 * Text input with extra phone number validation.
 */
declare interface IPhoneInput {
  /** Primary key */
  readonly id: number

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IPhoneInputCreate object.
 *
 * @see {@link IPhoneInput}
 */
declare interface IPhoneInputCreate {}

/**
 * Fields that can be updated for an IPhoneInputUpdate object.
 *
 * @see {@link IPhoneInput}
 */
declare interface IPhoneInputUpdate {
  /** Primary key */
  readonly id?: number | null
}

/**
 * Allow user to select a date.
 */
declare interface IDateInput {
  /** Primary key */
  readonly id: number

  min_value?: Date | null

  max_value?: Date | null

  exclude_day: boolean

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IDateInputCreate object.
 *
 * @see {@link IDateInput}
 */
declare interface IDateInputCreate {
  min_value?: Date | null

  max_value?: Date | null

  exclude_day?: boolean | null
}

/**
 * Fields that can be updated for an IDateInputUpdate object.
 *
 * @see {@link IDateInput}
 */
declare interface IDateInputUpdate {
  /** Primary key */
  readonly id?: number | null

  min_value?: Date | null

  max_value?: Date | null

  exclude_day?: boolean | null
}

/**
 * Allow user to select a time.
 */
declare interface ITimeInput {
  /** Primary key */
  readonly id: number

  min_value?: string | null

  max_value?: string | null

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an ITimeInputCreate object.
 *
 * @see {@link ITimeInput}
 */
declare interface ITimeInputCreate {
  min_value?: string | null

  max_value?: string | null
}

/**
 * Fields that can be updated for an ITimeInputUpdate object.
 *
 * @see {@link ITimeInput}
 */
declare interface ITimeInputUpdate {
  /** Primary key */
  readonly id?: number | null

  min_value?: string | null

  max_value?: string | null
}

/**
 * Allow user to enter a valid URL.
 */
declare interface IUrlInput {
  /** Primary key */
  readonly id: number

  min_length?: number | null

  max_length?: number | null

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IUrlInputCreate object.
 *
 * @see {@link IUrlInput}
 */
declare interface IUrlInputCreate {
  min_length?: number | null

  max_length?: number | null
}

/**
 * Fields that can be updated for an IUrlInputUpdate object.
 *
 * @see {@link IUrlInput}
 */
declare interface IUrlInputUpdate {
  /** Primary key */
  readonly id?: number | null

  min_length?: number | null

  max_length?: number | null
}

/**
 * Allow user to select one or multiple options.
 */
declare interface ICheckboxInput {
  /** Primary key */
  readonly id: number

  is_consent: boolean

  allow_indeterminate: boolean

  label?: string | null

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an ICheckboxInputCreate object.
 *
 * @see {@link ICheckboxInput}
 */
declare interface ICheckboxInputCreate {
  is_consent?: boolean | null

  allow_indeterminate?: boolean | null

  label?: string | null
}

/**
 * Fields that can be updated for an ICheckboxInputUpdate object.
 *
 * @see {@link ICheckboxInput}
 */
declare interface ICheckboxInputUpdate {
  /** Primary key */
  readonly id?: number | null

  is_consent?: boolean | null

  allow_indeterminate?: boolean | null

  label?: string | null
}

/**
 * A user's submission for a form.
 */
declare interface IPollSubmission {
  /** Primary key */
  readonly id: number

  user: {
    /** Primary key */
    readonly id: number

    email: string

    profile: {
      image?: string | null

      phone?: string | null

      name?: string | null

      bio?: string | null

      city?: string | null

      state?: string | null

      country?: import('./club-portal-enums.ts').CountryType | null

      birthday?: Date | null

      school_email?: string | null

      major?: string | null

      minor?: string | null

      college?: string | null

      graduation_date?: string | null

      readonly is_school_email_verified: boolean
    }
  }

  answers: IPollSubmissionAnswer[]

  readonly poll: number

  readonly is_valid: boolean

  readonly created_at: Date

  readonly updated_at: Date
}

/**
 * Fields needed to create an IPollSubmissionCreate object.
 *
 * @see {@link IPollSubmission}
 */
declare interface IPollSubmissionCreate {
  answers?: IPollSubmissionAnswerCreate[] | null
}

/**
 * Fields that can be updated for an IPollSubmissionUpdate object.
 *
 * @see {@link IPollSubmission}
 */
declare interface IPollSubmissionUpdate {
  /** Primary key */
  readonly id?: number | null

  answers?: IPollSubmissionAnswerUpdate[] | null
}

/**
 * Record a user's answer for a specific question.
 */
declare interface IPollSubmissionAnswer {
  /** Primary key */
  readonly id: number

  question: number

  text_value?: string | null

  number_value?: number | null

  boolean_value?: boolean | null

  other_option_value?: string | null

  file_value?: number | null

  options_value: string[]

  readonly is_valid: boolean

  readonly created_at: Date

  readonly updated_at: Date

  /** Error message if input is not valid. */
  readonly error?: string | null
}

/**
 * Fields needed to create an IPollSubmissionAnswerCreate object.
 *
 * @see {@link IPollSubmissionAnswer}
 */
declare interface IPollSubmissionAnswerCreate {
  question?: number | null

  text_value?: string | null

  number_value?: number | null

  boolean_value?: boolean | null

  other_option_value?: string | null

  file_value?: number | null

  options_value?: string[] | null
}

/**
 * Fields that can be updated for an IPollSubmissionAnswerUpdate object.
 *
 * @see {@link IPollSubmissionAnswer}
 */
declare interface IPollSubmissionAnswerUpdate {
  /** Primary key */
  readonly id?: number | null

  question?: number | null

  text_value?: string | null

  number_value?: number | null

  boolean_value?: boolean | null

  other_option_value?: string | null

  file_value?: number | null

  options_value?: string[] | null
}

/**
 * Represents a person in the system who can authenticate.
 */
declare interface IUser {
  /** Primary key */
  readonly id: number

  email: string

  username: string

  profile: {
    image?: string | null

    phone?: string | null

    name?: string | null

    bio?: string | null

    city?: string | null

    state?: string | null

    country?: import('./club-portal-enums.ts').CountryType | null

    birthday?: Date | null

    school_email?: string | null

    major?: string | null

    minor?: string | null

    college?: string | null

    graduation_date?: string | null

    readonly is_school_email_verified: boolean
  }

  clubs?: {
    /** Primary key */
    readonly id: number

    readonly name: string
  }[]

  socials?: {
    /** Primary key */
    readonly id: number

    social_type:
      | 'discord'
      | 'instagram'
      | 'facebook'
      | 'twitter'
      | 'linkedin'
      | 'github'
      | 'website'
      | 'bluesky'
      | 'slack'
      | 'other'

    url?: string | null

    username?: string | null

    order: number
  }[]

  readonly created_at: Date

  readonly updated_at: Date

  readonly is_onboarded: boolean

  readonly is_email_verified: boolean

  readonly can_authenticate: boolean

  readonly is_club_admin: boolean
}

/**
 * Fields needed to create an IUserCreate object.
 *
 * @see {@link IUser}
 */
declare interface IUserCreate {
  email?: string | null

  username?: string | null

  password?: string | null

  profile?: {
    image?: string | null

    phone?: string | null

    name?: string | null

    bio?: string | null

    city?: string | null

    state?: string | null

    country?: import('./club-portal-enums.ts').CountryType | null

    birthday?: Date | null

    school_email?: string | null

    major?: string | null

    minor?: string | null

    college?: string | null

    graduation_date?: string | null
  } | null

  socials?: {
    social_type?:
      | 'discord'
      | 'instagram'
      | 'facebook'
      | 'twitter'
      | 'linkedin'
      | 'github'
      | 'website'
      | 'bluesky'
      | 'slack'
      | 'other'
      | null

    url?: string | null

    username?: string | null

    order?: number | null
  }[]
}

/**
 * Fields that can be updated for an IUserUpdate object.
 *
 * @see {@link IUser}
 */
declare interface IUserUpdate {
  /** Primary key */
  readonly id?: number | null

  email?: string | null

  username?: string | null

  password?: string | null

  profile?: {
    image?: string | null

    phone?: string | null

    name?: string | null

    bio?: string | null

    city?: string | null

    state?: string | null

    country?: import('./club-portal-enums.ts').CountryType | null

    birthday?: Date | null

    school_email?: string | null

    major?: string | null

    minor?: string | null

    college?: string | null

    graduation_date?: string | null
  } | null

  clubs?: {
    /** Primary key */
    id?: number | null
  }[]

  socials?: {
    /** Primary key */
    id?: number | null

    social_type?:
      | 'discord'
      | 'instagram'
      | 'facebook'
      | 'twitter'
      | 'linkedin'
      | 'github'
      | 'website'
      | 'bluesky'
      | 'slack'
      | 'other'
      | null

    url?: string | null

    username?: string | null

    order?: number | null
  }[]
}

/*
 * ===============================================================
 * MARK: Read Only Types
 * ===============================================================
 */
/**
 * Represents tags for clubs.
 */
declare interface IClubTag {
  /** Primary key */
  readonly id: number

  name: string

  color: 'red' | 'orange' | 'yellow' | 'green' | 'blue' | 'purple' | 'grey'

  order: number
}

/**
 * Preview club info for unauthorized users
 */
declare interface IClubPreview {
  /** Primary key */
  readonly id: number

  name: string

  /** Link to the gatorconnect page */
  gatorconnect_url?: string | null

  /** How they assign links to clubs */
  gatorconnect_organization_url?: string | null

  founding_year: number

  alias?: string | null

  instagram_followers?: number | null

  about?: string | null

  /** Is this club shown on the csu site? */
  is_csu_partner: boolean

  majors: string[]

  logo: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  }

  tags: IClubTag[]

  socials: IClubSocial[]

  readonly member_count: unknown

  readonly is_claimed: boolean
}

/**
 * Display a list of social providers for user.
 */
declare interface ISocialProvider {
  /** Primary key */
  readonly id: number

  provider: string

  uid: string

  readonly last_login: Date

  readonly date_joined: Date
}

/**
 * Represents social profiles for clubs.
 */
declare interface IClubSocial {
  /** Primary key */
  readonly id: number

  url?: string | null

  username?: string | null

  social_type:
    | 'discord'
    | 'instagram'
    | 'facebook'
    | 'twitter'
    | 'linkedin'
    | 'github'
    | 'website'
    | 'bluesky'
    | 'slack'
    | 'other'

  order: number
}

/**
 * Represents photos for clubs.
 */
declare interface IClubPhoto {
  /** Primary key */
  readonly id: number

  order: number

  file: {
    /** Primary key */
    readonly id: number

    readonly display_name: string

    readonly url: string

    readonly size: unknown
  }
}

/**
 * Group related events.
 */
declare interface IEventTag {
  /** Primary key */
  readonly id: number

  readonly name: string

  readonly color:
    | 'red'
    | 'orange'
    | 'yellow'
    | 'green'
    | 'blue'
    | 'purple'
    | 'grey'

  readonly order: number
}
